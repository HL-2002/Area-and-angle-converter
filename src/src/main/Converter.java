/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import java.util.Arrays;

/**
 *
 * @author henrylang
 */
public class Converter extends javax.swing.JFrame {

    /**
     * Creates new form Converter
     */

    private String areaSelection[] = new String[] {
            "Square Kilometre", "Square metre", "Square mile", "Square yard",
            "Square foot", "Square inch", "Hectare", "Acre"
    };

    private String angleSelection[] = new String[] {
            "Arcsecond", "Degree", "Gradian", "Miliradian", "Minute of arc", "Radian"
    };

    private Boolean isInitialized = false;
    private int previus1selected = 0;
    private int previus2selected = 1;

    public Converter() {
        initComponents();

        unit = new Angle();

        convertSelector.setSelectedIndex(1);

        unitSelector1.removeAllItems();
        unitSelector2.removeAllItems();
        Arrays.stream(angleSelection).forEach(area -> {
            unitSelector1.addItem(area);
            unitSelector2.addItem(area);
        });
        unitSelector1.setSelectedIndex(0);
        unitSelector2.setSelectedIndex(1);
        isInitialized = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        convertSelector = new javax.swing.JComboBox<>();
        variable1 = new javax.swing.JTextField();
        variable2 = new javax.swing.JTextField();
        unitSelector1 = new javax.swing.JComboBox<>();
        unitSelector2 = new javax.swing.JComboBox<>();
        label = new javax.swing.JLabel();
        formulaLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        equalLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        convertSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Area", "Angle" }));
        convertSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertSelectorActionPerformed(evt);
            }
        });

        variable1.setText("1");
        variable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                variable1KeyReleased(evt);
            }
        });

        variable2.setText("1");
        variable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                variable2KeyReleased(evt);
            }
        });

        unitSelector1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "test1" }));
        unitSelector1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitSelector1ActionPerformed(evt);
            }
        });

        unitSelector2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "test1" }));
        unitSelector2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitSelector2ActionPerformed(evt);
            }
        });

        label.setBackground(new java.awt.Color(255, 255, 204));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setText("Formula");

        formulaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formulaLabel.setText("multiply the area value by 10000 ");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Area & Angle Converter");

        equalLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        equalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        equalLabel.setText("=");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(convertSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(formulaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(unitSelector1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(variable1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(equalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(unitSelector2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(variable2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(convertSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(variable2)
                    .addComponent(variable1)
                    .addComponent(equalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitSelector1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitSelector2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label)
                    .addComponent(formulaLabel))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void variable2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_variable2KeyReleased
        String value = variable2.getText();
        Runnable makeExecute = !value.equals("") ? () -> {
            // use the conversion
            try {
                Result result = unit.transform(Float.parseFloat(value), (String) unitSelector2.getSelectedItem(),
                        (String) unitSelector1.getSelectedItem());
                variable1.setText(String.valueOf(result.getValue()));
            }
            // manaje float exception
            catch (NumberFormatException e) {
                variable1.setText("");
            }

        } : () -> {
            variable1.setText("");
        };

        makeExecute.run();
    }//GEN-LAST:event_variable2KeyReleased

    private void variable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_variable1KeyReleased
        String value = variable1.getText();
        Runnable makeExecute = !value.equals("") ? () -> executeConversion() : () -> {
            variable2.setText("");
        };
        makeExecute.run();
    }//GEN-LAST:event_variable1KeyReleased

    private Unit unit;

    private void convertSelectorActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_convertSelectorActionPerformed
        String selection = (String) convertSelector.getSelectedItem();
        unit = selection.equals("Area") ? new Area() : new Angle();

        variable1.setText("");
        variable2.setText("");

        unitSelector1.removeAllItems();
        unitSelector2.removeAllItems();

        String[] selections = selection.equals("Area") ? areaSelection : angleSelection;
        Arrays.stream(selections).forEach(item -> {
            unitSelector1.addItem(item);
            unitSelector2.addItem(item);
        });
        unitSelector2.setSelectedIndex(1);
    }// GEN-LAST:event_convertSelectorActionPerformed

    private void unitSelector1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_unitSelector1ActionPerformed
        // compare the selected units
        Runnable makeSwap = unitSelector1.getSelectedIndex() == unitSelector2.getSelectedIndex()
                && isInitialized
                        ? () -> {
                            int temp = previus1selected;
                            previus1selected = previus2selected;
                            previus2selected = temp;
                            unitSelector2.setSelectedIndex(previus2selected);
                        }
                        : () -> {
                            previus1selected = unitSelector1.getSelectedIndex();
                        };
        makeSwap.run();

        Runnable makeExecute = isInitialized ? () -> executeConversion() : () -> {
        };
        makeExecute.run();
    }// GEN-LAST:event_unitSelector1ActionPerformed

    private void unitSelector2ActionPerformed(java.awt.event.ActionEvent evt) {
        // prevent chage if the same unit is selectet
        Runnable makeSwap = unitSelector1.getSelectedIndex() == unitSelector2.getSelectedIndex()
                && isInitialized
                        ? () -> {
                            System.out.println("swap");
                            int temp = previus1selected;
                            previus1selected = previus2selected;
                            previus2selected = temp;
                            unitSelector1.setSelectedIndex(previus1selected);
                        }
                        : () -> {
                            previus2selected = unitSelector2.getSelectedIndex();
                        };
        makeSwap.run();

        Runnable makeExecute = isInitialized ? () -> executeConversion() : () -> {
        };
        makeExecute.run();
    }

    private void executeConversion() {
        try {

            String value = variable1.getText();
            String from = (String) unitSelector1.getSelectedItem();
            String to = (String) unitSelector2.getSelectedItem();
            float valueFloat = Float.parseFloat(value);
            Result result = unit.transform(valueFloat, from, to);
            formulaLabel.setText(result.getUnit());
            variable2.setText(String.valueOf(result.getValue()));
        } catch (NumberFormatException e) {
            variable2.setText("");
        } catch (UnsupportedOperationException e) {
            formulaLabel.setText("Unsupported operation");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Init variables */

        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Converter().setVisible(true);

                // Set the area selection

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> convertSelector;
    private javax.swing.JLabel equalLabel;
    private javax.swing.JLabel formulaLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel label;
    private javax.swing.JComboBox<String> unitSelector1;
    private javax.swing.JComboBox<String> unitSelector2;
    private javax.swing.JTextField variable1;
    private javax.swing.JTextField variable2;
    // End of variables declaration//GEN-END:variables
}
